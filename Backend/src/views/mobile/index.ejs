<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smart Parking - Mobile</title>
    <link rel="stylesheet" href="http://localhost:3000/stylesheets/mobile.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@600&display=swap" rel="stylesheet">
    <link rel="icon" type="image/x-icon" href="http://localhost:3000/images/logo-transparency-bg.png">
</head>

<body>

    <div id="mobile">
        <header>
            <h1>Smart Parking</h1>
        </header>

        <section>
            <h2>Simulación de reservas</h2>
            <div>
                <button id="button1">Solicitar reserva</button>
                <button id="button2">Cancelar reserva</button>
                <button id="button3">Marcar llegada a la reserva</button>
            </div>
        </section>

        <section>
            <h3>Simulación de ingreso y salida</h3>
            <div>
                <button id="button4">Solicitar ingreso</button>
                <button id="button5">Marcar salida</button>
            </div>
        </section>

        <section>
            <h3>Respuesta del servidor</h3>
            <div id="response"></div>
        </section>
    </div>


</body>

<script src="/socket.io/socket.io.js"></script>

<script>

    const socket = io("http://localhost:3000")
    const button = document.getElementById("button1")
    const button2 = document.getElementById("button2")
    const button3 = document.getElementById("button3")
    const button4 = document.getElementById("button4")
    const button5 = document.getElementById("button5")

    const simulateSession = async () => {

        const data = {
            email: "lrevillod2022@alu.uct.cl",
            password: "!abc1234ABC"
        }

        //resto de sesiones

        // const data = {
        //     email: "cmedel2021@alu.uct.cl",
        //     password: "!abc1234ABC"
        // }

        // const data = {
        //     email: "tcurihual2022@alu.uct.cl",
        //     password: "!abc1234ABC"
        // }

        // const data = {
        //     email: "mvallejo2019@alu.uct.cl",
        //     password: "!abc1234ABC"
        // }

        // const data = {
        //     email: "criquelme2022@alu.uct.cl",
        //     password: "!abc1234ABC"
        // }

        try {

            const res = await fetch("http://localhost:3000/api/auth/login", {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            })

            return await res.json()

            // si hay algún err lo capturo y muestro por consola.

        } catch (error) {
            setResponse("Error al iniciar sesión")
        }
    }

    const setResponse = (message) => {
        const root = document.getElementById("response")
        root.innerHTML = message

        setTimeout(() => {
            root.innerHTML = ""
        }, 3000)
    }

    button.addEventListener("click", async (event) => {

        event.preventDefault()
        const { token } = await simulateSession()
        socket.emit("user-reservation-req", { token, patente: "ACXB42" })
    })

    button2.addEventListener("click", async (event) => {

        event.preventDefault()
        const { token } = await simulateSession()
        socket.emit("user-cancel-reservation", { token, patente: "ACXB42" })
    })

    button3.addEventListener("click", async (event) => {

        event.preventDefault()
        const { token } = await simulateSession()
        socket.emit("user-reservation-arrival", { token, patente: "ACXB42" })
    })

    button4.addEventListener("click", async (event) => {

        event.preventDefault()
        const { token } = await simulateSession()
        socket.emit("user-access-req", { token, patente: "ACXB42" })
    })

    button5.addEventListener("click", async (event) => {

        event.preventDefault()
        const { token } = await simulateSession()
        socket.emit("user-exit-req", { token, patente: "ACXB42" })
    })

    socket.on("reservation-ok", ({ message }) => {
        setResponse(message)
    })

    socket.on("reservation-denied", ({ message }) => {
        setResponse(message)
    })

    socket.on("reservation-cancel-ok", ({ message }) => {
        setResponse(message)
    })

    socket.on("reservation-cancel-denied", ({ message }) => {
        setResponse(message)
    })

    socket.on("reservation-arrival-ok", ({ message }) => {
        setResponse(message)
    })

    socket.on("reservation-arrival-denied", ({ message }) => {
        setResponse(message)
    })

    socket.on("parking-access-ok", ({ message }) => {
        setResponse(message)
    })

    socket.on("parking-access-denied", ({ message }) => {
        setResponse(message)
    })

    socket.on("parking-exit-ok", ({ message }) => {
        setResponse(message)
    })

    socket.on("parking-exit-denied", ({ message }) => {
        setResponse(message)
    })

</script>

</html>